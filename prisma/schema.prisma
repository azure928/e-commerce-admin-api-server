generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model country_code {
  id            Int     @id @default(autoincrement())
  country_code  String? @db.VarChar(100)
  country_dcode String? @db.VarChar(100)
  country_name  String? @db.VarChar(100)
}

model coupon_types {
  id              Int             @id @default(autoincrement())
  type            String          @db.VarChar(300)
  discount_amount Int?
  coupon_code     String?         @db.VarChar(300)
  created_at      DateTime        @default(now()) @db.Timestamp(0)
  updated_at      DateTime        @default(now()) @db.Timestamp(0)
  issued_coupon   issued_coupon[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model delivery_cost {
  id                     Int  @id @default(autoincrement())
  quantity               Int?
  Australia              Int?
  Brazil                 Int?
  Canada                 Int?
  China                  Int?
  France                 Int?
  Germany                Int?
  Hong_kong              Int? @map("Hong kong")
  Indonesia              Int?
  Japan                  Int?
  Malaysia               Int?
  New_Zealand            Int? @map("New Zealand")
  Philippines            Int?
  Russia                 Int?
  Singapore              Int?
  Spain                  Int?
  Taiwan                 Int?
  Thailand               Int?
  UK                     Int?
  USA                    Int?
  Vietnam                Int?
  Cambodia               Int?
  Laos                   Int?
  Macao                  Int?
  Mongolia               Int?
  Myanmar                Int?
  Bangladesh             Int?
  Bhutan                 Int?
  Brunei_Darussala       Int? @map("Brunei Darussala")
  India                  Int?
  Maldives               Int?
  Nepal                  Int?
  Sri_Lanka              Int? @map("Sri Lanka")
  Albania                Int?
  Armenia                Int?
  Austria                Int?
  Azerbaijan             Int?
  Bahrain                Int?
  Belarus                Int?
  Belgium                Int?
  Bulgaria               Int?
  Bosnia_And_Herzegovina Int? @map("Bosnia And Herzegovina")
  Croatia                Int?
  Cyprus                 Int?
  Czech_Rep              Int? @map("Czech Rep")
  Denmark                Int?
  Estonia                Int?
  Finland                Int?
  Georgia                Int?
  Greece                 Int?
  Hungary                Int?
  Iran                   Int?
  Ireland                Int?
  Israel                 Int?
  Jordan                 Int?
  Kazakhstan             Int?
  Latvia                 Int?
  Luxembourg             Int?
  Macedonia              Int?
  Netherlands            Int?
  Norway                 Int?
  Oman                   Int?
  Pakistan               Int?
  Poland                 Int?
  Portugal               Int?
  Qatar                  Int?
  Romania                Int?
  Saudi_Arabia           Int? @map("Saudi Arabia")
  Slovakia               Int?
  Slovenia               Int?
  Sweden                 Int?
  Switzerland            Int?
  Turkey                 Int?
  Ukraine                Int?
  United_Arab_Emirates   Int? @map("United Arab Emirates")
  Uzbekistan             Int?
  Algeria                Int?
  Antiless_Netherlands   Int?
  Argentina              Int?
  Botswana               Int?
  Cape_Verde             Int? @map("Cape Verde")
  Chile                  Int?
  Costa_Rica             Int? @map("Costa Rica")
  Cuba                   Int?
  Djibouti               Int?
  Dominican_Republic     Int? @map("Dominican Republic")
  Ecuador                Int?
  Egypt                  Int?
  Eritrea                Int?
  Ethiopia               Int?
  Fiji                   Int?
  Kenya                  Int?
  Lesotho                Int?
  Mauritius              Int?
  Mexico                 Int?
  Morocco                Int?
  Mozambique             Int?
  Nigeria                Int?
  Panama                 Int?
  Peru                   Int?
  Rwanda                 Int?
  Tanzania               Int?
  Tunisia                Int?
  Zambia                 Int?

  @@ignore
}

model issued_coupon {
  id              Int          @id @default(autoincrement())
  coupon_type_id  Int
  is_used         String       @default("미사용") @db.VarChar(100)
  discount_amount Int?
  created_at      DateTime     @default(now()) @db.Timestamp(0)
  updated_at      DateTime     @default(now()) @db.Timestamp(0)
  coupon_types    coupon_types @relation(fields: [coupon_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "issued_coupon_ibfk_1")
  orders          orders[]

  @@index([coupon_type_id], map: "coupon_type_id")
}

model orders {
  id               Int            @id @default(autoincrement())
  buyer_name       String?        @db.VarChar(300)
  product_id       Int
  pay_state        String         @default("결제완료") @db.VarChar(100)
  delivery_status  String         @default("배송대기") @db.VarChar(100)
  delivery_num     String?        @db.VarChar(300)
  quantity         Int
  price            Int
  issued_coupon_id Int?
  buyer_city       String?        @db.VarChar(300)
  buyer_country    String?        @db.VarChar(300)
  buyer_zipx       String?        @db.VarChar(300)
  vccode           String?        @db.VarChar(300)
  created_at       DateTime       @default(now()) @db.Timestamp(0)
  updated_at       DateTime       @default(now()) @db.Timestamp(0)
  products         products       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orders_ibfk_1")
  issued_coupon    issued_coupon? @relation(fields: [issued_coupon_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orders_ibfk_2")

  @@index([issued_coupon_id], map: "issued_coupon_id")
  @@index([product_id], map: "product_id")
}

model products {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(300)
  price      Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  orders     orders[]
}
